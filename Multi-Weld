@name Multi Weld V3
@persist [Props Load]:table LS:array

if(first()){
    
    #ifdef fileCanLoad() #else hint("Cant load save",5) #endif
    #ifdef weld(entity, entity) #else error("Cannot weld props") #endif
    
    runOnFile(1)
    runOnTick(1)
    runOnChat(1)
    runOnLast(1)
    
    enableConstraintUndo(0)
    
    function number chatCMD(S:string,L:array,N:number,N2:number){
        local V = 0
        if(L[1,string]:lower():findRE(S:lower()) & N | L[1,string]:lower() == S:lower() & !N){
            hideChat(1)
            V = 1
            if(N2){L:clear()}
        }
        if(V){return 1}
        if(!V){return 0}
    }

    function vector string:toVector(){
        local Ret = This:explode(",")
        for(I=1,Ret:count()){Ret:pushNumber(Ret[I,string]:toNumber())}
        return vec(Ret[4,number],Ret[5,number],Ret[6,number])
    }

    
    fileLoad("github/MWSettings.txt")
}


if(fileClk() & fileLoaded()){
    if(fileRead() != ""){
        Load = jsonDecode(fileRead())
    }else{
        Load["tool",string] = "simfphyswheeleditor"
        Load["color",string] = "255,0,255"
        Load["material",string] = "models/debug/debugwhite"
        print("Created load file")
    }
    
    printTable(Load)
}

if(chatClk(owner())){
    
    LS = owner():lastSaid():explode(" ")
    
    if(chatCMD("!tool",LS,1,1)){
        Load["tool",string] = owner():tool()
    }
    
    if(chatCMD("!col",LS,1,0)){
        Load["color",string] = LS[2,string]
        print(Load["color",string]:toVector())
    }
    
    if(chatCMD("!mater",LS,1,0)){
        Load["material",string] = LS[2,string]
        print(Load["material",string])
    }
}

if(changed(owner():keyAttack1()) & owner():keyAttack1() & owner():tool() == Load["tool",string]){
    local Ent = owner():aimEntity()
    
    if(Ent:owner() == owner() & !Props:exists(Ent:id():toString())){
        Props[Ent:id():toString(),array] = array(Ent,Ent:getMaterial(),Ent:getColor()) 
        Ent:setMaterial(Load["material",string])
        Ent:setColor(Load["color",string]:toVector())
    }
}

if(changed(owner():keyAttack2()) & owner():keyAttack2() & owner():tool() == Load["tool",string]){
    local Ent = owner():aimEntity()
    
    if(Ent:owner() == owner()){
        foreach(K,V:array = Props){
            local Ent2 = V[1,entity]
            weld(Ent2,Ent)
            Ent2:setMaterial(V[2,string])
            Ent2:setColor(V[3,vector])
        }
    
    }
    print("welded")
}

if(last()){
    fileWrite("github/MWSettings.txt",jsonEncode(Load))
}
